#!/usr/bin/env groovy

/* <leo-ci:head>
  Github Repository       | https://github.com/gutro/leo-ci/
  Delivery Documentation  | https://delivery-docs.leo-platform-infra.lvg-tech.net/docs/build/pipeline/
  Jenkins Pipeline Syntax | https://jenkins.io/doc/book/pipeline/syntax/
</leo-ci:head> */

// <leo-ci:functions>
boolean slackNotifications = false

// Check if job is triggered by cron
def isTimerTriggered = currentBuild.getBuildCauses('hudson.triggers.TimerTrigger$TimerTriggerCause').size() != 0

// Verify version bump (string comparison for now)
def checkPubVersion(String pkg) {
  PUB_VERSION = sh(script: "npm info ${pkg}@latest version --loglevel silent || true", returnStdout: true, label: 'Get latest published version').trim()
  def errStr = "Version (${PROJECT_VERSION}) is not newer than public version (${PUB_VERSION}). Update root \"package.json\"!"
  if (PROJECT_VERSION <= PUB_VERSION) {
    env.CHANGE_ID ? error(errStr) : unstable(errStr)
  }
}
// </leo-ci:functions>

pipeline {
  agent {
    // <leo-ci:agent>
    kubernetes {
      label 'build-npm-pkg-12.13'
      idleMinutes 10
      yamlFile '.jenkins/pod.yml'
    }
    // </leo-ci:agent>
  }
  options {
    // <leo-ci:options>
    buildDiscarder(logRotator(numToKeepStr: '30'))
    timeout(time: 1, unit: 'HOURS')
    disableConcurrentBuilds()
    // </leo-ci:options>
  }
  triggers {
    // <leo-ci:triggers>
    cron(BRANCH_NAME == 'master' ? '@daily' : '')
    // </leo-ci:triggers>
  }
  environment {
    // <leo-ci:environment>
    LEOCI_NPM_TOKEN = credentials('npm-token')
    VCS_REF         = "${GIT_COMMIT[0..6]}"
    BRANCH_NAME_    = "${BRANCH_NAME.replaceAll("[/_]", "-")}"
    BRANCH_NAME_TAG = "${CHANGE_BRANCH ?: BRANCH_NAME}"
    SLACK_URL       = credentials('slack-build-notification-url')

    // </leo-ci:environment>
  }
  stages {
    // <leo-ci:stage-prepare>
    stage('Prepare') {
      steps {
        container('node') {
          sh(script: 'leo-ci login npm', label: 'Npm Login')
          script {
            PROJECT_NAME           = sh(script: 'leo-ci npm name',           returnStdout: true, label: 'Get Project Name')
            PROJECT_VERSION        = sh(script: 'leo-ci npm version',        returnStdout: true, label: 'Get Project Version')
            PROJECT_VERSION_TAG    = "${BRANCH_NAME == 'master' ? PROJECT_VERSION : PROJECT_VERSION + '-prerelease'}"
            if ( ! isTimerTriggered ) {
              checkPubVersion(PROJECT_NAME)
            }
          }
          sh(script: 'leo-ci cache restore --checksum=$(leo-ci npm checksum) node_modules', label: 'Download Cache')
          sh(script: 'npm i --no-audit', label: 'Npm Install')
          sh(script: 'leo-ci cache store --checksum=$(leo-ci npm checksum) node_modules', label: 'Upload Cache')
        }
      }
    }
    // </leo-ci:stage-prepare>
    // <leo-ci:stage-tests>
    stage('Tests') {
      // Do tests if pull request.
      when { changeRequest() }
      parallel {
        stage('Lint') {
          steps {
            container('node') {
              sh(script: 'npm run lint', label: 'Run Lint')
            }
          }
        }
        stage('Test') {
          steps {
            container('node') {
              sh(script: 'npm run test', label: 'Run Unit Tests')
            }
          }
        }
        stage('Coverage') {
          steps {
            container('node') {
              sh(script: 'npm run coverage', label: 'Run Code Coverage')
            }
          }
        }
      }
    }
    // </leo-ci:stage-tests>
    // <leo-ci:stage-publish>
    stage('Version') {
      parallel {
        stage('Master') {
          when { branch 'master' }
          steps {
            script {
              CLIENT_RELEASE_TAG = 'latest'
            }
            container('node') {
              sh(script: "npm version ${PROJECT_VERSION} --no-git-tag-version --allow-same-version", label: 'Set Npm Version')
            }
          }
        }
        stage('Prerelease') {
          when { not { branch 'master' }}
          steps {
            script {
              CLIENT_RELEASE_TAG = "${BRANCH_NAME_TAG}"
            }
            container('node') {
              sh(script: "npm version ${PROJECT_VERSION}-${BRANCH_NAME_}-${VCS_REF}.${BUILD_NUMBER} --no-git-tag-version", label: 'Set Prerelease Npm Version')
            }
          }
        }
      }
    }
    stage('Publish') {
      when { expression { ! isTimerTriggered } }
      steps {
        container('node') {
          sh(script: "npm publish --tag ${CLIENT_RELEASE_TAG} --verbose", label: 'Npm Publish Client')
        }
      }
    }
    // </leo-ci:stage-publish>
  }
  post {
    // <leo-ci:post>
    always {
      junit(testResults: 'junit/test-results.xml', allowEmptyResults: true)
      archiveArtifacts(artifacts: 'coverage/**/*.*', allowEmptyArchive: true, onlyIfSuccessful: true)
    }
    success {
      script {
        container('node') {
          if(slackNotifications) { 
            sh("BUILD_RESULT=true PROJECT_NAME=${PROJECT_NAME} leo-ci slack")
          }
        }
      }
    }
    failure {
      script {
        container('node') {
          if(slackNotifications) { 
            sh("BUILD_RESULT=false PROJECT_NAME=${PROJECT_NAME} leo-ci slack")
          }
        }
      }
    }
    cleanup {
      deleteDir()
    }
    // </leo-ci:post>
  }
}
